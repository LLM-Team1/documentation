# Authentication with Google
We use the identity provider Google for authentication in our system. We have implemented a single sign-on button from Google in the frontend,
which allows the user to log in to our system with their Google account. Every time the user logs in to the frontend,
we receive a JSON Web Token (JWT) from Google, which we send to the backend in the header with every request. In the backend
we check if the token is valid using the Google-oauth2 API and whether the user exists in our database. If this is the case,
we can use it to authenticate the user and give them individual access to our systems and their own documents.

## Process flow of the authentication
1. User logs in by clicking the button
2. Google returns JWT
3. Sends JWT to the backend
4. Backend validates JWT and checks whether the user exists in our DB in the "user" table
5. If not, a user is created in the DB and the user object is sent to the frontend, if yes, the existing user object is sent to the frontend
6. In the frontend, a separate user object is created in the session memory, which contains both the data sent by the DB (**userName** and **userId**) and
data directly from the JWT (**firstName**, **lastName**, **profilePictureUrl**), as well as the JWT itself.
The data that we extract directly from the JWT in the frontend is not stored in the DB, which is why it is not contained in the user object that comes from the DB.

This user object now contains all the important information that is displayed on the start page and in the navigation bar,
among other things, and the token that is sent with every backend request.
On the backend side, we force the JWT token to be sent in the header when an endpoint is called, otherwise it is not even possible to execute the called function.

## Frontend fetching function
For this reason, we have created a function in the frontend that writes the JWT in the HTML header of each request.
This function is used for all of our backend requests and therefore also offers additional parameters so that it can be used flexibly for any type of request.
These include the mandatory specification of the CRUD method (Create, Read, Update, Delete) and the optional specification of a body.
However, the latter is only used when uploading the annual report.
In the event that the backend returns an error code or nothing at all, we have error handling in the frontend.
Sometimes the error is only displayed on the browser console, but sometimes it is also displayed in the frontend, e.g. if you try to load a non-existent analysis.
In any case, however, an error message in the backend does not cause the frontend to crash,
as we are informed by Typescript of the possibility of an empty response and accordingly functions that would have accessed data from the response are not even executed.

![Frontend fetching function](../images/Frontend/fetchQuery.png){width=100% .lightbox}

## Backend token validation
In the backend we have implemented two separate functions for the authentication process:

To validate the token, it is first extracted from the request header and then sent to Google using Googles oauth2 library.
If Google returns an error, the token is not valid and the user is not authenticated. Otherwise, the user is authenticated and the user object is sent back to the frontend.

```python
from google.oauth2 import id_token
from google.auth.transport import requests

def verify_token(token: str = Depends(get_token_from_header)) -> User:
    """
    Verify the provided token and return the user if the token is valid.

    :param token: The token to be verified
    :return: The User object if the token is valid
    :raises ValueError: If the token is invalid
    """
    try:
        id_info = id_token.verify_oauth2_token(
                    token,
                    requests.Request(),
                    GOOGLE_CLIENT_ID)
        print(id_info)
        return check_user_exists(id_info)
    except ValueError:
        raise HTTPException(status_code=401, detail="Invalid Token")
```

![Backend verify user token](../images/BackendArchitecture/VerifyToken.png){width=100% .lightbox}

The second function checks whether the user already exists in the database. If not, a new user is created and the user object is sent back to the frontend.
If the user already exists, the user object is returned.

```python
def check_user_exists(id_info) -> Optional[User]:
    """
    Check if the user exists in the database

    :param id_info: User token
    :return: User object
    :raises HTTPException: If the user id is invalid
    """
    user = get_user_from_db(str(int(id_info.get("sub"))))

    if user is not None:
        print(user, user.username)
        return user
    else:
        raise HTTPException(status_code=401, detail="Invalid user_id")
```
![Check if the user exists in DB](../images/BackendArchitecture/CheckUserExists.png){width=100% .lightbox}

### Using the authentication
To actually use the authentication, the endpoints that should be protected require the following attachment: `user=Security(verify_token.verify_token)`
This ensures that a token must always be passed when the function is called via the endpoint and in return provides the user object for the business logic to
determine the access rights of the user.

The following example shows how the user object is then used in the backend to determine if the user is allowed to view
the analyses for a specific report.

```python
@router.get("/swot/{report_id}")
async def list_available_swot_analysis(report_id: str,
                                       user=Security(verify_token)):
    """
    List available swot analyses for given report
    :param report_id: Report id
    :return: List of available swot analysis
    """

    # Initiate the database session
    session = config.mysql_db.get_session()

    # Check if the user is authorized to access the report
    match = session.query(user_report).filter(and_(
        user_report.c.user_id == user.user_id,
        user_report.c.report_id == report_id)).first()

    if match is None:
        raise HTTPException(status_code=403,
                            detail={'error': 'User not authorized for report'})

    else:
        # Get all the swot analysis for the report
        all_analysis = session.query(Analysis).filter(
            Analysis.report_id == report_id
        ).order_by(
            desc(Analysis.created_at)).all()

        list_of_analysis = [{
                                'id': analysis.analysis_id,
                                'created_at': analysis.created_at
                            } for analysis in all_analysis]
        return list_of_analysis
```

This individual access includes access to the public reports and to all private reports uploaded by the user. In addition,
each user can create their own SWOT analysis for each of their reports and create a SWOT comparison between two different reports.