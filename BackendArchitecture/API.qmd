# REST API
An API (Application Programming Interface) is used to establish a connection between the backend and the frontend.
In StratMystiqPro, we opted for a RESTful API (Representational State Transfer) because we wanted a lightweight and high-performance interface with which we could also exchange data in different formats.
This is necessary because, in addition to the typical JSON objects, we also need to transfer plain text and files. They are also a common standard and use CRUD methods.
Specifically, we use FastAPI because it is a high-performance and lightweight framework that offers better performance compared to Flask thanks to the asynchronous processing of requests and
the interactive documentation via the SwaggerUI.

## Architecture
In our system, we have created a separate endpoint in the API for each function that is required in the front end, which can be used to access this function.
The functions are divided into different routes for the sake of clarity. These are System Services, Chat Services (Experimental), File Services and SWOT Analysis.
Each of these routes then has one or more end points that we can call via this address in combination with the CRUD method.
To add a new endpoint, we simply need to create a new one as shown here. It is also important to note that we have kept the API and the logic very strictly separate.
All functions that are more extensive than a simple DB access are outsourced to other files and are only called in the API.

```python
@app.get("/")
async def root():
    """Test DB-Status"""
    config = Config()
    if config.db.collection.peek() is not None:
        return {'status': 'ok'}
    else:
        return {'status': 'error'}
```

### System Services
Path: ```/system/v1```

Info: For more information have a look in the Code-File ```/routers/system.py```

```/login```: This function is called to log in the user. In case the user doesn't exist in the DB, it is created.

### Chat Services (Experimental)
Path: ```/chat/v1```

Info: For more information have a look in the Code-File ```/routers/chat.py```

```/advanced_qa```: Answer questions about the reports

### File Services
Path: ```/files/v1```

Info: For more information have a look in the Code-File ```/routers/file.py```

```/ingest```: Starts the ingestion of the file to the database and returns the task id

```/status/{task_id}```: Obtain the processing status of a recently uploaded file.

```/uploaded_reports```: Get all reports the user has access to

```/delete_report```: Remove a report from the database

```/pdf_file```: Get pdf file from the database

```/analyse/table```: Creates embeddings for the table screenshots from the annual reports

### SWOT Analysis
Path: ```/swot/v1```

Info: For more information have a look in the Code-File ```/routers/swot.py```

```/swot/{report_id}```: List available swot analysis

```/swot/{report_id}/{analysis_id}```: Get a specific swot analysis from the database

```/swot/{report_id}```: Create a new swot analysis to a given report

```/swot/{report_id}/vs/{compare_report_id}```: Get a specific swot analysis comparison from the database

```/swot/{report_id}/vs/{compare_report_id}```: Create a new swot analysis comparison for two given reports

```/latestAnalysis```: Retrieve the latest SWOT analysis form the database for a given report

### default
Path: ```/```

Info: For more information have a look in the Code-File ```/main.py```

```/```: Test DB-Status

```/test_backend_connection```: Test Backend-Status