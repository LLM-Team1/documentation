# Frontend Techstack
For the frontend, we use the [React](https://react.dev/) web framework in combination with [Vite](https://vitejs.dev/) as the technical basis.
The code is written in HTML and [TypeScript](https://www.typescriptlang.org/), a JavaScript derivative. For the styling, we rely on the [Tailwind CSS](https://tailwindcss.com/)
framework and use some components from the [Material UI](https://mui.com/) library.
We also use the tools [ESlint](https://eslint.org/) and [Prettier](https://prettier.io/) to improve code quality.

## React
The choice to use React as a frontend instead of other web frontends, some of which are based on Python,
was made because it allows us to use and style individual components, making our UI more adaptable to the use case and,
in particular, to the subsequent users described in the personas. We have also already had good experience with React in the past,
which we were happy to expand on in this project. Another reason is that, compared to the other frameworks tested, Streamlib and Gradio,
user authentication via Google Login was much easier to implement here.

## Vite
We also opted for Vite as a development server for React, as it offers several advantages in terms of building times and ease of development.
In addition to a much faster server startup time and building time for deployment, rebuilding when changing the code during development also takes place with almost no waiting time.
This becomes particularly important when the size of the project increases, but the difference is also very noticeable with a project of our size.
This increase in performance is achieved by so-called native ESM (ECMAScript Module) and the Hot Module Replacement (HMR) that this enables.
This means that individual parts of the application can be replaced during operation without having to reload the entire page if the code is changed and
this component needs to be rebuilt. This also preserves the state of the page, which means, for example,
that all entries made are not lost and it is not necessary to log back in with Google. [@webpackHMR] [@viteFeatures]

## TypeScript
For the functional development of the frontend, we chose TypeScript as our programming language instead of typical JavaScript.
It enables type-safe development by enforcing types and interfaces for all variables and the associated better error analysis.

## TailwindCSS
For styling, we use the TailwindCSS framework, which combines typical CSS functions into classes that can be applied directly to the individual elements in the HTML code,
similar to inline css. This makes styling easier for us and, from our point of view, makes it easier to maintain the code and keep it clearer,
as the styling of the individual HTML elements is not outsourced to an external CSS file, but is implemented directly in the code where it is later used.
It also makes it easy to create responsive designs.

## MaterialUI
Nevertheless, we used the MaterialUI component library for some components, as we did not have to create the elements ourselves.
We used the framework of the dialog and dropdown component from MaterialUI for our popup and added our own content there.
The advantage of this ready-made component is that it already has an animation for opening and closing, as well as a responsive design.
Building this component ourselves would have taken some time and the result would have been about the same.

## ESlint and Prettier
We also use the formatting and linting tools Prettier and ESLint to increase code quality. Prettier ensures that the code is in a uniform format.
This means, for example, that all indentations, breaks and spaces in brackets are always consistent across all files.
ESlint helps to analyze the code for errors and avoid bad coding style. For example, it throws a warning if the same code is found in multiple files and
then suggests exporting it or warns if an attempt is made to access variables or functions that do not exist.
Without this help, such an error would only become apparent at runtime and possibly cause the program to crash.

## Google Single-Sign-on
Another important library that we use in the frontend is that of the Google Single-Sign-on identity provider.
Here we have the option of simple and reliable user authentication by requiring users to log in to our frontend with their Google account.
We then identify the users via the JWT token returned by the identity provider by reading the ID it contains and comparing it with our database.